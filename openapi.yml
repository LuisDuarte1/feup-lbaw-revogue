openapi: '3.0.2'
info:
  title: ReVogue
  version: '1.0'
servers:
  - url: https://localhost
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: laravel_session
paths:
  /:
    get:
      summary: Landing page of ReVogue
      description: Returns HTML, contains a overview of the website from trending products and categories and redirects people to the website features.
      responses:
        '200':
          description: Returns the Landing Page
  /login:
    get:
      summary: Login Page
      description: Retuns HTML, contains the layout and the forms that the user should use to login. Should also contain buttons to OAuth login providers.
      responses:
        '200':
          description: Returns the Login Page
    post:
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      summary: Login Action
      description: The Login Action, submitted by the form in the page
      responses:
        '200':
          description: When the login is successful, redirect to the landing page or to the last page the user has been to.
        '403':
          description: When the login is not successful return the login page but with an error
# TODO: make oauth login
# /login/callback:
#   parameters:
#     - 
  /search:
    get:
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Query string, when not supplied returns an empty search page
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit of items to get, not required because the application sets a default
        - in: query
          name: after
          schema:
            type: integer
          description: Starts the query from a certain index defaults to 0
      summary: Search products
      responses:
        '200':
          description: Returns the HTML for the search page
  /products/{slug}:
    get:
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returns the page of the product
        '404':
          description: Return default 404 page if slug is not found
  /register:
    get:
      summary: Register page 
      description: Returns the register page if the user is not logged on, redirect to the landing page otherwise
      responses:
        '200':
          description: Returns the register Page
    post:
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                displayName:
                  type: string
              required:
                - email
                - password
                - username
                - displayName
      summary: Register Action
      responses:
        '200':
          description: If sucessful redirect to the profile settings page
        '400':
          description: Returns the register page with an error if something is wrong with the user submission
  /login/reset-password:
    summary: Reset Password page
    get:
      responses:
        '200':
          description: Returns the Reset Password
    post:
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Always returns 200, and shows a sucessful reset page for security purposes even if the email doesn't exist      
  /login/email-confirmation:
    summary: Email Confirmation page
    get:
      responses:
        '200':
          description: Returns the email confirmation page
    post:
      responses:
        '200':
          description: Resends the confirmation email and returns the same page
  /login/email-confirmation/verify/{id}/{hash}:
    summary: Email confirmation verification
    get:
      parameters:
        - in: path
          name: id
          schema: 
            type: string
          required: true
        - in: path
          name: hash
          schema: 
            type: string
          required: true
      responses:
        '200': 
          description: If the verification is valid, validate the email and redirect to the home page.
          
  /admin/orders:
    get:
      responses:
        '200':
          description: Returns the admin orders page
  

  


    

    